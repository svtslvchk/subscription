from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from app.database import get_db
from app.models import User, BalanceTransaction
from app.schemas import BalanceUpdate
from app.auth import get_current_user
from datetime import datetime
from fastapi import Request
import traceback

router = APIRouter(
    prefix="/wallet",
    tags=["wallet"]
)

@router.get("/balance", response_model=float)
async def get_user_balance(
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return float(current_user.balance)


from decimal import Decimal

@router.post("/topup", status_code=status.HTTP_200_OK)
async def top_up_balance(
    balance_data: BalanceUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    try:
        if balance_data.amount <= 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
            )

        amount_decimal = Decimal(str(balance_data.amount))  # üî• –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        current_user.balance += amount_decimal

        transaction = BalanceTransaction(
            user_id=current_user.id,
            amount=amount_decimal,
            type="topup",
            description=balance_data.description or "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
        )

        db.add(transaction)
        db.commit()
        db.refresh(current_user)

        return {
            "message": "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω",
            "new_balance": float(current_user.balance)
        }

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")




@router.post("/withdraw", status_code=status.HTTP_200_OK)
async def withdraw_from_balance(
        balance_data: BalanceUpdate,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    """
    –°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏)
    """
    if balance_data.amount <= 0:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
        )

    if current_user.balance < balance_data.amount:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
        )

    current_user.balance -= balance_data.amount

    transaction = BalanceTransaction(
        user_id=current_user.id,
        amount=balance_data.amount,
        type="withdraw",
        description=balance_data.description or "–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤",
        created_at=datetime.utcnow()
    )

    db.add(transaction)
    db.commit()

    return {
        "message": "–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã",
        "new_balance": float(current_user.balance)
    }


@router.get("/history")
async def get_balance_history(
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º
    """
    history = db.query(BalanceTransaction).filter(
        BalanceTransaction.user_id == current_user.id
    ).order_by(BalanceTransaction.created_at.desc()).all()

    return [
        {
            "id": t.id,
            "amount": float(t.amount),
            "type": t.type,
            "description": t.description,
            "created_at": t.created_at.isoformat()
        } for t in history
    ]
